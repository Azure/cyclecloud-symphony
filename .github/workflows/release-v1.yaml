# Based on example from https://github.com/actions/upload-release-asset
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - '1*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
name: Test Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build pkg
        run:
          sudo apt update || apt update;
          sudo apt install -y dos2unix;
          sudo apt-get install -y python3 python3-pip || apt-get install -y python3 python3-pip;
          pip3 install virtualenv;
          python3 -m virtualenv $GITHUB_WORKSPACE/.venv/;
          source $GITHUB_WORKSPACE/.venv/bin/activate && python package.py && python package_cc.py;
      - name: Get the version of CC plugin
        id: get_version_cc
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Create Release for CC plugin
        id: create_release_cc
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.get_version_cc.outputs.version }}
          name: Release ${{ steps.get_version_cc.outputs.version }}
          draft: true
          prerelease: true      
      # - name: Upload Release Asset CC
      #   id: upload-release-asset-cc 
      #   uses: softprops/action-gh-release@v1
      #   if: ${{startsWith(github.ref, 'refs/tags/') }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     draft: true
      #     prerelease: true
      #     files: dist/cyclecloud-symphony-pkg-${{ steps.get_version_cc.outputs.version }}.tar.gz
      #     name: cyclecloud-symphony-pkg-${{ steps.get_version_cc.outputs.version }}.tar.gz
      - name: Upload Release Asset
        if: ${{ steps.create_release_cc.outputs.releases_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for f in $(find dist -name '-1.*.tar.gz'); do
            gh release upload ${{ steps.release.outputs.tag_name }} $f
          done